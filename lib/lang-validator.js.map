{"version":3,"sources":["../src/lib/lang-validator.js"],"names":["LangValidator","config","validateScripts","scriptResult","validateTemplates","templateResult","errors","langPath","templatePath","validateRegion","langFiles","templateFiles","forEach","langFile","templateFile","scriptPath","scriptFiles","scriptFile"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA;;;IAGqBA,a;;;;AACjB;;;;;+BAKcC,M,EAAQ;AAClB,mBAAO,IAAID,aAAJ,CAAkBC,MAAlB,CAAP;AACH;;AAED;;;;;;;AAIA,6BAAyB;AAAA,YAAbA,MAAa,uEAAJ,EAAI;AAAA;;AACrB,aAAKA,MAAL,uDAAsCA,MAAtC;AACH;;AAED;;;;;;;;;;;;;;;;uCAK+B,KAAKC,eAAL,E;;;AAArBC,4C;;uCACuB,KAAKC,iBAAL,E;;;AAAvBC,8C;iEAEC;AACHC,uFACOD,eAAeC,MADtB,oCAEOH,aAAaG,MAFpB;AADG,iC;;;;;;;;;;;;;;;;;AAQX;;;;;;;;;;;;;;;;;0CAKuD,KAAKL,M,EAAhDM,Q,WAAAA,Q,EAAUC,Y,WAAAA,Y,EAAcC,c,WAAAA,c;;uCACR,+BAAcF,QAAd,EAAwBE,cAAxB,C;;;AAAlBC,yC;;uCACsB,2BAAUF,YAAV,C;;;AAAtBG,6C;AACFL,sC,GAAS,E;;;AAEbI,0CAAUE,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC5BF,kDAAcC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACpCR,4FAAaA,MAAb,oCAAwB,6CAAmBQ,YAAnB,EAAiCD,QAAjC,EAA2C,MAAKZ,MAAhD,CAAxB;AACH,qCAFD;AAGH,iCAJD;;kEAMO,EAAEK,cAAF,E;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;;;2CAKqD,KAAKL,M,EAA9CM,Q,YAAAA,Q,EAAUQ,U,YAAAA,U,EAAYN,c,YAAAA,c;;uCACN,+BAAcF,QAAd,EAAwBE,cAAxB,C;;;AAAlBC,yC;;uCACoB,2BAAUK,UAAV,C;;;AAApBC,2C;AACFV,sC,GAAS,E;;;AAEbI,0CAAUE,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC5BG,gDAAYJ,OAAZ,CAAoB,UAACK,UAAD,EAAgB;AAChCX,4FAAaA,MAAb,oCAAwB,yCAAiBW,UAAjB,EAA6BJ,QAA7B,EAAuC,OAAKZ,MAA5C,CAAxB;AACH,qCAFD;AAGH,iCAJD;;kEAMO,EAAEK,cAAF,E;;;;;;;;;;;;;;;;;;;;kBArEMN,a","file":"lang-validator.js","sourcesContent":["import DEFAULT_CONFIG from './default-config';\nimport { readFiles, readLangFiles } from './file-reader';\nimport { findScriptErrors } from './error-finders/script-error-finder';\nimport { findTemplateErrors } from './error-finders/template-error-finder';\n\n/**\n * A class for validating of language keys\n */\nexport default class LangValidator {\n    /**\n     * Create an instance\n     * @param {ValidatorConfig} [config]\n     * @return {LangValidator}\n     */\n    static create(config) {\n        return new LangValidator(config);\n    }\n\n    /**\n     * @param {ValidatorConfig} [config={}]\n     * @return {void}\n     */\n    constructor(config = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config };\n    }\n\n    /**\n     * Validate all files\n     * @return {Promise<ValidationResult>}\n     */\n    async validate() {\n        const scriptResult = await this.validateScripts();\n        const templateResult = await this.validateTemplates();\n\n        return {\n            errors: [\n                ...templateResult.errors,\n                ...scriptResult.errors,\n            ],\n        };\n    }\n\n    /**\n     * Validate each template file\n     * @return {Promise<ValidationResult>}\n     */\n    async validateTemplates() {\n        const { langPath, templatePath, validateRegion } = this.config;\n        const langFiles = await readLangFiles(langPath, validateRegion);\n        const templateFiles = await readFiles(templatePath);\n        let errors = [];\n\n        langFiles.forEach((langFile) => {\n            templateFiles.forEach((templateFile) => {\n                errors = [...errors, ...findTemplateErrors(templateFile, langFile, this.config)];\n            });\n        });\n\n        return { errors };\n    }\n\n    /**\n     * Validate each script file\n     * @return {Promise<ValidationResult>}\n     */\n    async validateScripts() {\n        const { langPath, scriptPath, validateRegion } = this.config;\n        const langFiles = await readLangFiles(langPath, validateRegion);\n        const scriptFiles = await readFiles(scriptPath);\n        let errors = [];\n\n        langFiles.forEach((langFile) => {\n            scriptFiles.forEach((scriptFile) => {\n                errors = [...errors, ...findScriptErrors(scriptFile, langFile, this.config)];\n            });\n        });\n\n        return { errors };\n    }\n}\n"]}