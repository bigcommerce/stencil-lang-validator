{"version":3,"sources":["../../src/lib/error-finders/template-error-finder.js"],"names":["findTemplateErrors","templateFile","langFile","helperName","langKeyPrefix","langKeys","content","patterns","getHelperPatterns","errors","forEach","regexp","matches","exec","langKey","replace","indexOf","push","angularRegExp","RegExp","handlebarsRegExp"],"mappings":";;;;;QAUgBA,kB,GAAAA,kB;;AAVhB;;AACA;;AAEA;;;;;;;AAOO,SAASA,kBAAT,CAA4BC,YAA5B,EAA0CC,QAA1C,QAAmF;AAAA,QAA7BC,UAA6B,QAA7BA,UAA6B;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AACtF,QAAMC,WAAW,iCAAgBH,SAASI,OAAzB,CAAjB;AACA,QAAMC,WAAWC,kBAAkBL,UAAlB,CAAjB;AACA,QAAMM,SAAS,EAAf;;AAEAF,aAASG,OAAT,CAAiB,UAACC,MAAD,EAAY;AACzB,YAAIC,gBAAJ;;AAEA,eAAOA,UAAUD,OAAOE,IAAP,CAAYZ,aAAaK,OAAzB,CAAjB,EAAoD;AAChD,gBAAMQ,UAAUF,QAAQ,CAAR,EAAWG,OAAX,CAAmB,MAAnB,EAA2B,IAA3B,CAAhB;;AAEA,gBAAIV,SAASW,OAAT,CAAiBZ,gBAAmBA,aAAnB,SAAoCU,OAApC,GAAgDA,OAAjE,MAA8E,CAAC,CAAnF,EAAsF;AAClFL,uBAAOQ,IAAP,CAAY,uCAAoBH,OAApB,EAA6Bb,YAA7B,EAA2CC,QAA3C,EAAqDU,OAArD,CAAZ;AACH;AACJ;AACJ,KAVD;;AAYA,WAAOH,MAAP;AACH;;AAED;;;;;;AAMA,SAASD,iBAAT,CAA2BL,UAA3B,EAAuC;AACnC,QAAMe,gBAAgB,IAAIC,MAAJ,gDAAuDhB,UAAvD,EAAqE,GAArE,CAAtB;AACA,QAAMiB,mBAAmB,IAAID,MAAJ,CAAchB,UAAd,sCAA0D,GAA1D,CAAzB;;AAEA,WAAO,CAACe,aAAD,EAAgBE,gBAAhB,CAAP;AACH","file":"template-error-finder.js","sourcesContent":["import { createTemplateError } from '../error-factory';\nimport { extractLangKeys } from '../parsers/lang-parser';\n\n/**\n * Find language key errors in template files\n * @param {File} templateFile\n * @param {File} langFile\n * @param {ValidatorConfig} config\n * @return {ValidationError[]}\n */\nexport function findTemplateErrors(templateFile, langFile, { helperName, langKeyPrefix }) {\n    const langKeys = extractLangKeys(langFile.content);\n    const patterns = getHelperPatterns(helperName);\n    const errors = [];\n\n    patterns.forEach((regexp) => {\n        let matches;\n\n        while (matches = regexp.exec(templateFile.content)) {\n            const langKey = matches[2].replace(/\\\\'/g, '\\'');\n\n            if (langKeys.indexOf(langKeyPrefix ? `${langKeyPrefix}.${langKey}` : langKey) === -1) {\n                errors.push(createTemplateError(langKey, templateFile, langFile, matches));\n            }\n        }\n    });\n\n    return errors;\n}\n\n/**\n * Get regexp patterns for matching template helpers\n * @private\n * @param {string} helperName\n * @return {RegExp[]}\n */\nfunction getHelperPatterns(helperName) {\n    const angularRegExp = new RegExp(`\\\\s*('|\"|&quot;|&#39;)(.*?)\\\\1\\\\s*\\\\|\\\\s*${helperName}`, 'g');\n    const handlebarsRegExp = new RegExp(`${helperName}\\\\s*('|\"|&quot;|&#39;)(.*?)\\\\1`, 'g');\n\n    return [angularRegExp, handlebarsRegExp];\n}\n"]}