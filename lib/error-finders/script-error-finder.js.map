{"version":3,"sources":["../../src/lib/error-finders/script-error-finder.js"],"names":["findScriptErrors","scriptFile","langFile","instanceName","methodName","langKeyPrefix","langKeys","content","errors","err","node","langKey","arguments","indexOf","push"],"mappings":";;;;;QAWgBA,gB,GAAAA,gB;;AAXhB;;AACA;;AACA;;AAEA;;;;;;;AAOO,SAASA,gBAAT,CAA0BC,UAA1B,EAAsCC,QAAtC,QAA6F;AAAA,QAA3CC,YAA2C,QAA3CA,YAA2C;AAAA,QAA7BC,UAA6B,QAA7BA,UAA6B;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AAChG,QAAMC,WAAW,iCAAgBJ,SAASK,OAAzB,CAAjB;AACA,QAAMC,SAAS,EAAf;;AAEA,gCAASP,UAAT,EAAqB,UAACQ,GAAD,EAAMC,IAAN,EAAe;AAChC,YAAI,CAAC,4BAASA,IAAT,EAAeP,YAAf,EAA6BC,UAA7B,CAAL,EAA+C;AAC3C;AACH;;AAED,YAAMO,UAAU,sCAAmBD,KAAKE,SAAL,CAAe,CAAf,CAAnB,CAAhB;;AAEA,YAAID,WAAWL,SAASO,OAAT,CAAiBR,gBAAmBA,aAAnB,SAAoCM,OAApC,GAAgDA,OAAjE,MAA8E,CAAC,CAA9F,EAAiG;AAC7FH,mBAAOM,IAAP,CAAY,qCAAkBH,OAAlB,EAA2BV,UAA3B,EAAuCC,QAAvC,EAAiDQ,IAAjD,CAAZ;AACH;AACJ,KAVD;;AAYA,WAAOF,MAAP;AACH","file":"script-error-finder.js","sourcesContent":["import { createScriptError } from '../error-factory';\nimport { extractLangKeys } from '../parsers/lang-parser';\nimport { eachNode, getExpressionValue, isMethod } from '../parsers/script-parser';\n\n/**\n * Find language key errors in script files\n * @param {File} scriptFile\n * @param {File} langFile\n * @param {ValidatorConfig} config\n * @return {ValidationError[]}\n */\nexport function findScriptErrors(scriptFile, langFile, { instanceName, methodName, langKeyPrefix }) {\n    const langKeys = extractLangKeys(langFile.content);\n    const errors = [];\n\n    eachNode(scriptFile, (err, node) => {\n        if (!isMethod(node, instanceName, methodName)) {\n            return;\n        }\n\n        const langKey = getExpressionValue(node.arguments[0]);\n\n        if (langKey && langKeys.indexOf(langKeyPrefix ? `${langKeyPrefix}.${langKey}` : langKey) === -1) {\n            errors.push(createScriptError(langKey, scriptFile, langFile, node));\n        }\n    });\n\n    return errors;\n}\n"]}