{"version":3,"sources":["../src/lib/file-reader.js"],"names":["filePattern","filePaths","filePromises","map","readFile","filePath","all","readFiles","validateRegion","reduce","result","basename","includes","readLangFiles","resolve","reject","error","fileContent","content","path"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;0EAKO,iBAAyBA,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqB,mCAAcA,WAAd,CADrB;;AAAA;AACGC,iCADH;AAEGC,oCAFH,GAEkBD,UAAUE,GAAV,CAAc;AAAA,mCAAYC,SAASC,QAAT,CAAZ;AAAA,yBAAd,CAFlB;AAAA,yDAII,kBAAQC,GAAR,CAAYJ,YAAZ,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,S;;;;;AAOtB;;;;;;;;;2EAMO,kBAA6BP,WAA7B,EAA0CQ,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqB,mCAAcR,WAAd,CADrB;;AAAA;AACGC,iCADH;AAEGC,oCAFH,GAEkBD,UAAUQ,MAAV,CAAiB,UAACC,MAAD,EAASL,QAAT,EAAsB;AACxD,gCAAI,CAACG,cAAD,IAAmB,eAAKG,QAAL,CAAcN,QAAd,EAAwB,OAAxB,EAAiCO,QAAjC,CAA0C,GAA1C,CAAvB,EAAuE;AACnE,uCAAOF,MAAP;AACH;;AAED,8EAAWA,MAAX,IAAmBN,SAASC,QAAT,CAAnB;AACH,yBANoB,EAMlB,EANkB,CAFlB;AAAA,0DAUI,kBAAQC,GAAR,CAAYJ,YAAZ,CAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeW,a;;;;;AAatB;;;;;;;;AAnCA;;;;AACA;;;;AACA;;;;AAuCA,SAAST,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,WAAO,sBAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACpC,qBAAGX,QAAH,CAAYC,QAAZ,EAAsB,MAAtB,EAA8B,UAACW,KAAD,EAAQC,WAAR,EAAwB;AAClD,gBAAID,KAAJ,EAAW;AACPD,uBAAOC,KAAP;AACH,aAFD,MAEO;AACHF,wBAAQ,EAAEI,SAASD,WAAX,EAAwBE,MAAMd,QAA9B,EAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH","file":"file-reader.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { findFilePaths } from './file-path-finder';\n\n/**\n * Read text files\n * @param {string} filePattern\n * @return {Promise<File[]>}\n */\nexport async function readFiles(filePattern) {\n    const filePaths = await findFilePaths(filePattern);\n    const filePromises = filePaths.map(filePath => readFile(filePath));\n\n    return Promise.all(filePromises);\n}\n\n/**\n * Read language files\n * @param {string} filePattern\n * @param {boolean} validateRegion\n * @return {Promise<File[]>}\n */\nexport async function readLangFiles(filePattern, validateRegion) {\n    const filePaths = await findFilePaths(filePattern);\n    const filePromises = filePaths.reduce((result, filePath) => {\n        if (!validateRegion && path.basename(filePath, '.json').includes('-')) {\n            return result;\n        }\n\n        return [...result, readFile(filePath)];\n    }, []);\n\n    return Promise.all(filePromises);\n}\n\n/**\n * Read a file asynchronously\n * @private\n * @param {string} filePath\n * @return {Promise<File>}\n */\nfunction readFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (error, fileContent) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve({ content: fileContent, path: filePath });\n            }\n        });\n    });\n}\n"]}