{"version":3,"sources":["../src/bin/option-parser.js"],"names":["parseOptions","argv","pkg","getPackage","version","usage","option","parse","filePath","join","sync","__dirname","JSON","readFileSync"],"mappings":";;;;;QAWgBA,Y,GAAAA,Y;;AAXhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;AAKO,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AAC/B,QAAMC,MAAMC,YAAZ;;AAEA,wBAAUC,OAAV,CAAkBF,IAAIE,OAAtB,EACKC,KADL,CACW,WADX,EAEKC,MAFL,CAEY,wBAFZ,EAEsC,uFAFtC,EAGKA,MAHL,CAGY,0BAHZ,EAGwC,qFAHxC,EAIKA,MAJL,CAIY,4BAJZ,EAI0C,uFAJ1C,EAKKA,MALL,CAKY,qBALZ,EAKmC,kCALnC,EAKuE,KALvE,EAMKA,MANL,CAMY,sBANZ,EAMoC,+EANpC,EAOKA,MAPL,CAOY,wBAPZ,EAOsC,2FAPtC,EAQKA,MARL,CAQY,4BARZ,EAQ0C,+CAR1C,EASKA,MATL,CASY,sBATZ,EASoC,wFATpC,EAUKA,MAVL,CAUY,mBAVZ,EAUiC,yCAVjC,EAU4E,KAV5E,EAWKC,KAXL,CAWWN,IAXX;;AAaA,WAAO,kBAAK,uDAAL,EAA+B,CAClC,aADkC,EAElC,YAFkC,EAGlC,cAHkC,EAIlC,eAJkC,EAKlC,UALkC,EAMlC,YANkC,EAOlC,YAPkC,EAQlC,cARkC,EASlC,gBATkC,CAA/B,CAAP;AAWH;;AAED;;;;;AAKA,SAASE,UAAT,GAAsB;AAClB,QAAMK,WAAW,eAAKC,IAAL,CAAU,iBAAOC,IAAP,CAAYC,SAAZ,CAAV,EAAkC,cAAlC,CAAjB;;AAEA,WAAOC,KAAKL,KAAL,CAAW,aAAGM,YAAH,CAAgBL,QAAhB,EAA0B,MAA1B,CAAX,CAAP;AACH","file":"option-parser.js","sourcesContent":["import commander from 'commander';\nimport fs from 'fs';\nimport path from 'path';\nimport pkgDir from 'pkg-dir';\nimport { isNil, omitBy, pick } from 'lodash';\n\n/**\n * Parse CLI options\n * @param {Object} argv\n * @return {ValidatorConfig}\n */\nexport function parseOptions(argv) {\n    const pkg = getPackage();\n\n    commander.version(pkg.version)\n        .usage('[options]')\n        .option('-l, --lang-path [path]', 'Configure the path to a language file. Pass a glob pattern to validate multiple files')\n        .option('-s, --script-path [path]', 'Configure the path to a script file. Pass a glob pattern to validate multiple files')\n        .option('-t, --template-path [path]', 'Configure the path to a template file. Pass a glob pattern to validate multiple files')\n        .option('-F, --fail-on-error', 'Fail when there is a missing key', false)\n        .option('--helper-name [name]', 'Configure the helper name used to retrieve language strings in HTML templates')\n        .option('--instance-name [name]', 'Configure the name of an instance responsible for retrieving language strings in JS files')\n        .option('--lang-key-prefix [prefix]', 'Configure the prefix applied to language keys')\n        .option('--method-name [name]', 'Configure the name of a method responsible for retrieving language strings in JS files')\n        .option('--validate-region', 'Validate region-specific language files', false)\n        .parse(argv);\n\n    return pick(omitBy(commander, isNil), [\n        'failOnError',\n        'helperName',\n        'instanceName',\n        'langKeyPrefix',\n        'langPath',\n        'methodName',\n        'scriptPath',\n        'templatePath',\n        'validateRegion',\n    ]);\n}\n\n/**\n * Get package.json\n * @private\n * @return {Object}\n */\nfunction getPackage() {\n    const filePath = path.join(pkgDir.sync(__dirname), 'package.json');\n\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'));\n}\n"]}